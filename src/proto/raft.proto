syntax = "proto3";

package raft;

service RaftServer {
  // Invoked by candidates to gather votes
  rpc handleVoteRequest(VoteRequest) returns (VoteResponse);
  // Invoked by leader to replicate log entries; also used as heartbeat(empty request)
  rpc handleAppendEntriesRequest(AppendEntriesRequest) returns (AppendEntriesResponse);
  // Invoked by leader to send chunks of a snapshot to a follower, Leaders always send chunks in order.
  rpc handleInstallSnapshotRequest(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

message VoteRequest {
  // candidate's term
  uint32 term = 1;
  // candidate requesting vote
  string candidateId = 2;
  // index if candidate's last log entry
  uint32 lastLogIndex = 3;
  // term of candidate's last log entry
  uint32 lastLogTerm = 4;
}

message VoteResponse {
  // current term, for candidate to update itself
  uint32 term = 1;
  // true means candidate received vote
  string voteGranted = 2;
}

message AppendEntriesRequest {
  // leader's term
  uint32 term = 1;
  // so follower can redirect clients
  string leaderId = 2;
  // index of log entry immediately preceding new ones
  uint32 prevLogIndex = 3;
  // term of preLogIndex entry
  uint32 preLogTerm = 4;
  // log entries to store(empty for heartbeat;may send more than one for efficiency)
  repeated Record entries = 5;
  // leader's commitIndex
  uint32 leaderCommit = 6;
}

message AppendEntriesResponse {
  // current term,for leader to update itself
  uint32 term = 1;
  // true if follower contained entry matching preLogIndex and prevLogTerm
  bool success = 2;
}

message InstallSnapshotRequest{
  // leader's term
  uint32 term = 1;
  // so follower can redirect clients
  string leaderId = 2;
  // the snapshot replaces all entries up through and including this index
  uint32 lastIncludedIndex = 3;
  // term of lastIncludedIndex
  uint32 lastIncludedTerm = 4;
  // byte offset where chunk is positioned in the snapshot file
  uint32 offset = 5;
  // raw bytes of the snapshot chunk,starting at offset
  repeated Record data = 6;
  // true if this is the last chunk
  bool done = 7;

}

message InstallSnapshotResponse{
  // currentTerm, for leader to update itself
  uint32 term = 1;
}

message Record{
  string contents = 1;
}