// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raft.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct VoteRequest {
    // message fields
    pub term: u32,
    pub candidateId: ::std::string::String,
    pub lastLogIndex: u32,
    pub lastLogTerm: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VoteRequest {
    fn default() -> &'a VoteRequest {
        <VoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl VoteRequest {
    pub fn new() -> VoteRequest {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // string candidateId = 2;


    pub fn get_candidateId(&self) -> &str {
        &self.candidateId
    }
    pub fn clear_candidateId(&mut self) {
        self.candidateId.clear();
    }

    // Param is passed by value, moved
    pub fn set_candidateId(&mut self, v: ::std::string::String) {
        self.candidateId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_candidateId(&mut self) -> &mut ::std::string::String {
        &mut self.candidateId
    }

    // Take field
    pub fn take_candidateId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.candidateId, ::std::string::String::new())
    }

    // uint32 lastLogIndex = 3;


    pub fn get_lastLogIndex(&self) -> u32 {
        self.lastLogIndex
    }
    pub fn clear_lastLogIndex(&mut self) {
        self.lastLogIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastLogIndex(&mut self, v: u32) {
        self.lastLogIndex = v;
    }

    // uint32 lastLogTerm = 4;


    pub fn get_lastLogTerm(&self) -> u32 {
        self.lastLogTerm
    }
    pub fn clear_lastLogTerm(&mut self) {
        self.lastLogTerm = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastLogTerm(&mut self, v: u32) {
        self.lastLogTerm = v;
    }
}

impl ::protobuf::Message for VoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.candidateId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastLogIndex = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastLogTerm = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.candidateId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.candidateId);
        }
        if self.lastLogIndex != 0 {
            my_size += ::protobuf::rt::value_size(3, self.lastLogIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lastLogTerm != 0 {
            my_size += ::protobuf::rt::value_size(4, self.lastLogTerm, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if !self.candidateId.is_empty() {
            os.write_string(2, &self.candidateId)?;
        }
        if self.lastLogIndex != 0 {
            os.write_uint32(3, self.lastLogIndex)?;
        }
        if self.lastLogTerm != 0 {
            os.write_uint32(4, self.lastLogTerm)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VoteRequest {
        VoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &VoteRequest| { &m.term },
                |m: &mut VoteRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "candidateId",
                |m: &VoteRequest| { &m.candidateId },
                |m: &mut VoteRequest| { &mut m.candidateId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lastLogIndex",
                |m: &VoteRequest| { &m.lastLogIndex },
                |m: &mut VoteRequest| { &mut m.lastLogIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lastLogTerm",
                |m: &VoteRequest| { &m.lastLogTerm },
                |m: &mut VoteRequest| { &mut m.lastLogTerm },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VoteRequest>(
                "VoteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VoteRequest {
        static instance: ::protobuf::rt::LazyV2<VoteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VoteRequest::new)
    }
}

impl ::protobuf::Clear for VoteRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.candidateId.clear();
        self.lastLogIndex = 0;
        self.lastLogTerm = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VoteResponse {
    // message fields
    pub term: u32,
    pub voteGranted: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VoteResponse {
    fn default() -> &'a VoteResponse {
        <VoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl VoteResponse {
    pub fn new() -> VoteResponse {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // string voteGranted = 2;


    pub fn get_voteGranted(&self) -> &str {
        &self.voteGranted
    }
    pub fn clear_voteGranted(&mut self) {
        self.voteGranted.clear();
    }

    // Param is passed by value, moved
    pub fn set_voteGranted(&mut self, v: ::std::string::String) {
        self.voteGranted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voteGranted(&mut self) -> &mut ::std::string::String {
        &mut self.voteGranted
    }

    // Take field
    pub fn take_voteGranted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voteGranted, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voteGranted)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.voteGranted.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voteGranted);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if !self.voteGranted.is_empty() {
            os.write_string(2, &self.voteGranted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VoteResponse {
        VoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &VoteResponse| { &m.term },
                |m: &mut VoteResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voteGranted",
                |m: &VoteResponse| { &m.voteGranted },
                |m: &mut VoteResponse| { &mut m.voteGranted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VoteResponse>(
                "VoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VoteResponse {
        static instance: ::protobuf::rt::LazyV2<VoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VoteResponse::new)
    }
}

impl ::protobuf::Clear for VoteResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.voteGranted.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesRequest {
    // message fields
    pub term: u32,
    pub leaderId: ::std::string::String,
    pub prevLogIndex: u32,
    pub preLogTerm: u32,
    pub entries: ::protobuf::RepeatedField<Record>,
    pub leaderCommit: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesRequest {
    fn default() -> &'a AppendEntriesRequest {
        <AppendEntriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesRequest {
    pub fn new() -> AppendEntriesRequest {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // string leaderId = 2;


    pub fn get_leaderId(&self) -> &str {
        &self.leaderId
    }
    pub fn clear_leaderId(&mut self) {
        self.leaderId.clear();
    }

    // Param is passed by value, moved
    pub fn set_leaderId(&mut self, v: ::std::string::String) {
        self.leaderId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaderId(&mut self) -> &mut ::std::string::String {
        &mut self.leaderId
    }

    // Take field
    pub fn take_leaderId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leaderId, ::std::string::String::new())
    }

    // uint32 prevLogIndex = 3;


    pub fn get_prevLogIndex(&self) -> u32 {
        self.prevLogIndex
    }
    pub fn clear_prevLogIndex(&mut self) {
        self.prevLogIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_prevLogIndex(&mut self, v: u32) {
        self.prevLogIndex = v;
    }

    // uint32 preLogTerm = 4;


    pub fn get_preLogTerm(&self) -> u32 {
        self.preLogTerm
    }
    pub fn clear_preLogTerm(&mut self) {
        self.preLogTerm = 0;
    }

    // Param is passed by value, moved
    pub fn set_preLogTerm(&mut self, v: u32) {
        self.preLogTerm = v;
    }

    // repeated .raft.Record entries = 5;


    pub fn get_entries(&self) -> &[Record] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Record>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Record> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Record> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // uint32 leaderCommit = 6;


    pub fn get_leaderCommit(&self) -> u32 {
        self.leaderCommit
    }
    pub fn clear_leaderCommit(&mut self) {
        self.leaderCommit = 0;
    }

    // Param is passed by value, moved
    pub fn set_leaderCommit(&mut self, v: u32) {
        self.leaderCommit = v;
    }
}

impl ::protobuf::Message for AppendEntriesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leaderId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prevLogIndex = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.preLogTerm = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.leaderCommit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leaderId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.leaderId);
        }
        if self.prevLogIndex != 0 {
            my_size += ::protobuf::rt::value_size(3, self.prevLogIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.preLogTerm != 0 {
            my_size += ::protobuf::rt::value_size(4, self.preLogTerm, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.leaderCommit != 0 {
            my_size += ::protobuf::rt::value_size(6, self.leaderCommit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if !self.leaderId.is_empty() {
            os.write_string(2, &self.leaderId)?;
        }
        if self.prevLogIndex != 0 {
            os.write_uint32(3, self.prevLogIndex)?;
        }
        if self.preLogTerm != 0 {
            os.write_uint32(4, self.preLogTerm)?;
        }
        for v in &self.entries {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.leaderCommit != 0 {
            os.write_uint32(6, self.leaderCommit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesRequest {
        AppendEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &AppendEntriesRequest| { &m.term },
                |m: &mut AppendEntriesRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leaderId",
                |m: &AppendEntriesRequest| { &m.leaderId },
                |m: &mut AppendEntriesRequest| { &mut m.leaderId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prevLogIndex",
                |m: &AppendEntriesRequest| { &m.prevLogIndex },
                |m: &mut AppendEntriesRequest| { &mut m.prevLogIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "preLogTerm",
                |m: &AppendEntriesRequest| { &m.preLogTerm },
                |m: &mut AppendEntriesRequest| { &mut m.preLogTerm },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                "entries",
                |m: &AppendEntriesRequest| { &m.entries },
                |m: &mut AppendEntriesRequest| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "leaderCommit",
                |m: &AppendEntriesRequest| { &m.leaderCommit },
                |m: &mut AppendEntriesRequest| { &mut m.leaderCommit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesRequest>(
                "AppendEntriesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesRequest {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesRequest::new)
    }
}

impl ::protobuf::Clear for AppendEntriesRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.leaderId.clear();
        self.prevLogIndex = 0;
        self.preLogTerm = 0;
        self.entries.clear();
        self.leaderCommit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesResponse {
    // message fields
    pub term: u32,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesResponse {
    fn default() -> &'a AppendEntriesResponse {
        <AppendEntriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesResponse {
    pub fn new() -> AppendEntriesResponse {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for AppendEntriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesResponse {
        AppendEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &AppendEntriesResponse| { &m.term },
                |m: &mut AppendEntriesResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &AppendEntriesResponse| { &m.success },
                |m: &mut AppendEntriesResponse| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesResponse>(
                "AppendEntriesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesResponse {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesResponse::new)
    }
}

impl ::protobuf::Clear for AppendEntriesResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotRequest {
    // message fields
    pub term: u32,
    pub leaderId: ::std::string::String,
    pub lastIncludedIndex: u32,
    pub lastIncludedTerm: u32,
    pub offset: u32,
    pub data: ::protobuf::RepeatedField<Record>,
    pub done: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstallSnapshotRequest {
    fn default() -> &'a InstallSnapshotRequest {
        <InstallSnapshotRequest as ::protobuf::Message>::default_instance()
    }
}

impl InstallSnapshotRequest {
    pub fn new() -> InstallSnapshotRequest {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // string leaderId = 2;


    pub fn get_leaderId(&self) -> &str {
        &self.leaderId
    }
    pub fn clear_leaderId(&mut self) {
        self.leaderId.clear();
    }

    // Param is passed by value, moved
    pub fn set_leaderId(&mut self, v: ::std::string::String) {
        self.leaderId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaderId(&mut self) -> &mut ::std::string::String {
        &mut self.leaderId
    }

    // Take field
    pub fn take_leaderId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leaderId, ::std::string::String::new())
    }

    // uint32 lastIncludedIndex = 3;


    pub fn get_lastIncludedIndex(&self) -> u32 {
        self.lastIncludedIndex
    }
    pub fn clear_lastIncludedIndex(&mut self) {
        self.lastIncludedIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastIncludedIndex(&mut self, v: u32) {
        self.lastIncludedIndex = v;
    }

    // uint32 lastIncludedTerm = 4;


    pub fn get_lastIncludedTerm(&self) -> u32 {
        self.lastIncludedTerm
    }
    pub fn clear_lastIncludedTerm(&mut self) {
        self.lastIncludedTerm = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastIncludedTerm(&mut self, v: u32) {
        self.lastIncludedTerm = v;
    }

    // uint32 offset = 5;


    pub fn get_offset(&self) -> u32 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = v;
    }

    // repeated .raft.Record data = 6;


    pub fn get_data(&self) -> &[Record] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<Record>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<Record> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<Record> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    // bool done = 7;


    pub fn get_done(&self) -> bool {
        self.done
    }
    pub fn clear_done(&mut self) {
        self.done = false;
    }

    // Param is passed by value, moved
    pub fn set_done(&mut self, v: bool) {
        self.done = v;
    }
}

impl ::protobuf::Message for InstallSnapshotRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leaderId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastIncludedIndex = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lastIncludedTerm = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offset = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.done = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leaderId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.leaderId);
        }
        if self.lastIncludedIndex != 0 {
            my_size += ::protobuf::rt::value_size(3, self.lastIncludedIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lastIncludedTerm != 0 {
            my_size += ::protobuf::rt::value_size(4, self.lastIncludedTerm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(5, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.done != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if !self.leaderId.is_empty() {
            os.write_string(2, &self.leaderId)?;
        }
        if self.lastIncludedIndex != 0 {
            os.write_uint32(3, self.lastIncludedIndex)?;
        }
        if self.lastIncludedTerm != 0 {
            os.write_uint32(4, self.lastIncludedTerm)?;
        }
        if self.offset != 0 {
            os.write_uint32(5, self.offset)?;
        }
        for v in &self.data {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.done != false {
            os.write_bool(7, self.done)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotRequest {
        InstallSnapshotRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &InstallSnapshotRequest| { &m.term },
                |m: &mut InstallSnapshotRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leaderId",
                |m: &InstallSnapshotRequest| { &m.leaderId },
                |m: &mut InstallSnapshotRequest| { &mut m.leaderId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lastIncludedIndex",
                |m: &InstallSnapshotRequest| { &m.lastIncludedIndex },
                |m: &mut InstallSnapshotRequest| { &mut m.lastIncludedIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lastIncludedTerm",
                |m: &InstallSnapshotRequest| { &m.lastIncludedTerm },
                |m: &mut InstallSnapshotRequest| { &mut m.lastIncludedTerm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "offset",
                |m: &InstallSnapshotRequest| { &m.offset },
                |m: &mut InstallSnapshotRequest| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                "data",
                |m: &InstallSnapshotRequest| { &m.data },
                |m: &mut InstallSnapshotRequest| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "done",
                |m: &InstallSnapshotRequest| { &m.done },
                |m: &mut InstallSnapshotRequest| { &mut m.done },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstallSnapshotRequest>(
                "InstallSnapshotRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstallSnapshotRequest {
        static instance: ::protobuf::rt::LazyV2<InstallSnapshotRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstallSnapshotRequest::new)
    }
}

impl ::protobuf::Clear for InstallSnapshotRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.leaderId.clear();
        self.lastIncludedIndex = 0;
        self.lastIncludedTerm = 0;
        self.offset = 0;
        self.data.clear();
        self.done = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotResponse {
    // message fields
    pub term: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstallSnapshotResponse {
    fn default() -> &'a InstallSnapshotResponse {
        <InstallSnapshotResponse as ::protobuf::Message>::default_instance()
    }
}

impl InstallSnapshotResponse {
    pub fn new() -> InstallSnapshotResponse {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }
}

impl ::protobuf::Message for InstallSnapshotResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotResponse {
        InstallSnapshotResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &InstallSnapshotResponse| { &m.term },
                |m: &mut InstallSnapshotResponse| { &mut m.term },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstallSnapshotResponse>(
                "InstallSnapshotResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstallSnapshotResponse {
        static instance: ::protobuf::rt::LazyV2<InstallSnapshotResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstallSnapshotResponse::new)
    }
}

impl ::protobuf::Clear for InstallSnapshotResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub contents: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // string contents = 1;


    pub fn get_contents(&self) -> &str {
        &self.contents
    }
    pub fn clear_contents(&mut self) {
        self.contents.clear();
    }

    // Param is passed by value, moved
    pub fn set_contents(&mut self, v: ::std::string::String) {
        self.contents = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contents(&mut self) -> &mut ::std::string::String {
        &mut self.contents
    }

    // Take field
    pub fn take_contents(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contents, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contents)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contents.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contents);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contents.is_empty() {
            os.write_string(1, &self.contents)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contents",
                |m: &Record| { &m.contents },
                |m: &mut Record| { &mut m.contents },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record>(
                "Record",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record {
        static instance: ::protobuf::rt::LazyV2<Record> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record::new)
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.contents.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nraft.proto\x12\x04raft\"\x89\x01\n\x0bVoteRequest\x12\x12\n\x04term\
    \x18\x01\x20\x01(\rR\x04term\x12\x20\n\x0bcandidateId\x18\x02\x20\x01(\t\
    R\x0bcandidateId\x12\"\n\x0clastLogIndex\x18\x03\x20\x01(\rR\x0clastLogI\
    ndex\x12\x20\n\x0blastLogTerm\x18\x04\x20\x01(\rR\x0blastLogTerm\"D\n\
    \x0cVoteResponse\x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04term\x12\x20\n\
    \x0bvoteGranted\x18\x02\x20\x01(\tR\x0bvoteGranted\"\xd6\x01\n\x14Append\
    EntriesRequest\x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04term\x12\x1a\n\
    \x08leaderId\x18\x02\x20\x01(\tR\x08leaderId\x12\"\n\x0cprevLogIndex\x18\
    \x03\x20\x01(\rR\x0cprevLogIndex\x12\x1e\n\npreLogTerm\x18\x04\x20\x01(\
    \rR\npreLogTerm\x12&\n\x07entries\x18\x05\x20\x03(\x0b2\x0c.raft.RecordR\
    \x07entries\x12\"\n\x0cleaderCommit\x18\x06\x20\x01(\rR\x0cleaderCommit\
    \"E\n\x15AppendEntriesResponse\x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04\
    term\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success\"\xf0\x01\n\
    \x16InstallSnapshotRequest\x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04term\
    \x12\x1a\n\x08leaderId\x18\x02\x20\x01(\tR\x08leaderId\x12,\n\x11lastInc\
    ludedIndex\x18\x03\x20\x01(\rR\x11lastIncludedIndex\x12*\n\x10lastInclud\
    edTerm\x18\x04\x20\x01(\rR\x10lastIncludedTerm\x12\x16\n\x06offset\x18\
    \x05\x20\x01(\rR\x06offset\x12\x20\n\x04data\x18\x06\x20\x03(\x0b2\x0c.r\
    aft.RecordR\x04data\x12\x12\n\x04done\x18\x07\x20\x01(\x08R\x04done\"-\n\
    \x17InstallSnapshotResponse\x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04ter\
    m\"$\n\x06Record\x12\x1a\n\x08contents\x18\x01\x20\x01(\tR\x08contents2\
    \xfc\x01\n\nRaftServer\x12:\n\x11handleVoteRequest\x12\x11.raft.VoteRequ\
    est\x1a\x12.raft.VoteResponse\x12U\n\x1ahandleAppendEntriesRequest\x12\
    \x1a.raft.AppendEntriesRequest\x1a\x1b.raft.AppendEntriesResponse\x12[\n\
    \x1chandleInstallSnapshotRequest\x12\x1c.raft.InstallSnapshotRequest\x1a\
    \x1d.raft.InstallSnapshotResponseJ\x8e\r\n\x06\x12\x04\0\05\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\r\n\n\n\x02\x06\0\
    \x12\x04\x04\0\x08\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\x12\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\x05\x02<\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x05\x06\x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x05\x18#\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x05.:\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x06\x02\
    W\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x06\x06\x20\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x06!5\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x06@U\n\
    \x0b\n\x04\x06\0\x02\x02\x12\x03\x07\x02]\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x07\x06\"\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x07#9\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x07D[\n\n\n\x02\x04\0\x12\x04\n\0\x0f\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\n\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x0b\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b\
    \x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x02\x19\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0c\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\r\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\r\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\t\x15\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\r\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x02\
    \x19\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x0e\t\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0e\
    \x17\x18\n\n\n\x02\x04\x01\x12\x04\x11\0\x14\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x11\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x02\x12\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x12\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12\x10\x11\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x13\x02\x19\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\
    \t\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x13\x17\x18\n\n\n\x02\x04\
    \x02\x12\x04\x16\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x1c\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x02\x12\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\t\r\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17\x10\x11\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\x18\x02\x16\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x18\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x18\t\x11\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03\x18\x14\x15\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\
    \x19\x02\x1a\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x19\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03\x19\t\x15\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\x19\x18\x19\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1a\x02\x18\
    \n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03\x1a\t\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\
    \x1a\x16\x17\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x1b\x02\x1e\n\x0c\n\x05\
    \x04\x02\x02\x04\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\x02\x02\x04\x06\
    \x12\x03\x1b\x0b\x11\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x1b\x12\x19\
    \n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x1b\x1c\x1d\n\x0b\n\x04\x04\x02\
    \x02\x05\x12\x03\x1c\x02\x1a\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x1c\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x1c\t\x15\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03\x1c\x18\x19\n\n\n\x02\x04\x03\x12\x04\x1f\0\
    \"\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\x08\x1d\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03\x20\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x20\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x20\t\r\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x20\x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\x03!\x02\x13\n\
    \x0c\n\x05\x04\x03\x02\x01\x05\x12\x03!\x02\x06\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03!\x07\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03!\x11\
    \x12\n\n\n\x02\x04\x04\x12\x04$\0-\x01\n\n\n\x03\x04\x04\x01\x12\x03$\
    \x08\x1e\n\x0b\n\x04\x04\x04\x02\0\x12\x03%\x02\x12\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03%\t\r\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03%\x10\x11\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03&\x02\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03&\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03&\t\x11\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03&\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03'\x02\x1f\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03'\t\x1a\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03'\x1d\x1e\
    \n\x0b\n\x04\x04\x04\x02\x03\x12\x03(\x02\x1e\n\x0c\n\x05\x04\x04\x02\
    \x03\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03(\t\x19\
    \n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03(\x1c\x1d\n\x0b\n\x04\x04\x04\
    \x02\x04\x12\x03)\x02\x14\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03)\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03)\t\x0f\n\x0c\n\x05\x04\x04\
    \x02\x04\x03\x12\x03)\x12\x13\n\x0b\n\x04\x04\x04\x02\x05\x12\x03*\x02\
    \x1b\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03*\x02\n\n\x0c\n\x05\x04\x04\
    \x02\x05\x06\x12\x03*\x0b\x11\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03*\
    \x12\x16\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03*\x19\x1a\n\x0b\n\x04\
    \x04\x04\x02\x06\x12\x03+\x02\x10\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\
    \x03+\x02\x06\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03+\x07\x0b\n\x0c\n\
    \x05\x04\x04\x02\x06\x03\x12\x03+\x0e\x0f\n\n\n\x02\x04\x05\x12\x04/\01\
    \x01\n\n\n\x03\x04\x05\x01\x12\x03/\x08\x1f\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x030\x02\x12\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x030\x02\x08\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x030\t\r\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x030\x10\x11\n\n\n\x02\x04\x06\x12\x043\05\x01\n\n\n\x03\x04\x06\x01\
    \x12\x033\x08\x0e\n\x0b\n\x04\x04\x06\x02\0\x12\x034\x02\x16\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x034\t\x11\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x034\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
